@using Nethereum.Erc20.Blazor.Validators
@using Nethereum.UI;
@using FluentValidation;
@using Accelist.FluentValidation.Blazor;
@using Microsoft.AspNetCore.Components.Forms
@using Nethereum.Contracts
@using Microsoft.AspNetCore.Components.Authorization
@inject SelectedEthereumHostProviderService selectedHostProviderService;

<AuthorizeView Roles="EthereumConnected">
    <Authorized Context="Auth">
        <div class="card">
            <div class="card-body">
                <EditForm Model="redeemModel" OnValidSubmit="@RedeemAsync">
                    <FluentValidator Validator="@validator"></FluentValidator>
                    <div class="form-group row">
                        <label for="" class="col-sm-1 col-form-label">Contract Address:</label>
                        <div class="col-sm-10">
                            <InputText id="TokenContractAddress" class="form-control" @bind-Value="redeemModel.ContractModel.Address" type="text" />
                            <small id="TokenContractAddressHelp" class="form-text text-muted">The ERC4626 contract address</small>
                            <ValidationMessage For="() => redeemModel.ContractModel.Address"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="" class="col-sm-1 col-form-label">ERC4626 Decimals:</label>
                        <div class="col-sm-10">
                            <input id="TokenDecimalPlaces" class="form-control" @bind="redeemModel.ContractModel.Decimals" type="text" />
                            <small id="TokenDecimalPlacesHelp" class="form-text text-muted">Decimals of ERC4626 vault</small>
                            <ValidationMessage For="() => redeemModel.ContractModel.Decimals"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="toAccount" class="col-sm-1 col-form-label">Receiver:</label>
                        <div class="col-sm-10">
                            <InputText id="toAccount" class="form-control" @bind-Value="redeemModel.Receiver" type="text" />
                            <small id="toAccountHelp" class="form-text text-muted">The account address, which will recevied assets</small>
                            <ValidationMessage For="() => redeemModel.Receiver"></ValidationMessage>
                        </div>
                    </div>

                    <div class="form-group row">
                        <label for="etherAmount" class="col-sm-1 col-form-label">Shares:</label>
                        <div class="col-sm-10">
                            <input id="tokenAmount" class="form-control" @bind="redeemModel.Shares" type="text" />
                            <small id="tokenAmountHelp" class="form-text text-muted">The amount of shares to redeem</small>
                            <ValidationMessage For="() => redeemModel.Shares"></ValidationMessage>
                        </div>
                    </div>

                    <div class="form-group">
                        <ValidationSummary></ValidationSummary>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">
                            Deposit
                        </button>
                    </div>
                </EditForm>
                @if (TransactionHash != null)
                {
                    <div>Transaction Hash= @TransactionHash</div>
                }

                @if (ErrorRedeemMessage != null)
                {
                    <div>An error has occurred= @ErrorRedeemMessage</div>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>

        <div>
            Please connect to Ethereum !
        </div>

    </NotAuthorized>
</AuthorizeView>

@code {

    ERC4626RedeemModel redeemModel = new ERC4626RedeemModel("0x751F0cC6115410A3eE9eC92d08f46Ff6Da98b708");
    String TransactionHash { get; set; }
    String ErrorRedeemMessage { get; set; }
    ERC4626RedeemValidator validator = new ERC4626RedeemValidator();

    public async Task RedeemAsync()
    {
        try
        {
            TransactionHash = null;

            var functionDeposit = redeemModel.GetRedeemFunction();
            var web3 = await selectedHostProviderService.SelectedHost.GetWeb3Async();
            var contractHandler = web3.Eth.GetContractTransactionHandler<RedeemFunction>();
            TransactionHash = await contractHandler.SendRequestAsync(redeemModel.ContractModel.Address, functionDeposit);
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorRedeemMessage = ex.Message;
            this.StateHasChanged();
        }
    }
}